<html
    window-resizable="true"
    window-width="700dip"
    window-height="700dip"
>
<head>
<title>Build exe</title>
<style>

@import url(src/vendor/8ctopus/sciter-logger/src/logger.css);

plaintext#logger {
    height: *;
}

</style>
<script type="module">

import * as env from "@env";
import * as sciter from "@sciter";
import * as sys from "@sys";
import {logger} from "src/vendor/8ctopus/sciter-logger/src/logger.js";
import * as utils from "src/vendor/8ctopus/sciter-utils/src/utils.js";

const resources = "resources.dat";
const icon      = "app.ico";

// current working directory
const cwd = URL.fromPath(sys.cwd());

// initialize logger
logger.init({
    file: cwd + "/build.log",
    clear: true,
});

// attach logger to console
logger.attach();

// capture unhandled exceptions
logger.capture();

document.ready = async() => {
    // subscribe to logger messages
    logger.plaintext(document.$("plaintext#logger"));

    // add support for F5 reload
    utils.addReloadWindow();

    // close window on escape
    utils.closeWindowOnEscape(Window.this);

    // center window on screen
    utils.centerWindow(Window.this, "screen");

    // log sciter version
    console.debug(utils.sciterInfo());

    console.line();

    console.log(`current working dir - ${cwd}`);

    // get platform
    const platform = env.PLATFORM.toLowerCase();

    console.log(`platform - ${platform}`);

    let packfolder;

    switch (platform) {
        case "windows":
            packfolder = "bin/win-x32/packfolder.exe";
            break;

        case "linux":
            packfolder = "bin/linux/packfolder";
            break;

        case "osx":
            packfolder = "bin/macosx/packfolder";
            break;

        default:
            throw new Error(`unsupported plaform - ${platform}`);
    }

    console.line();

    // load manifest info
    let url = document.url(`src/manifest.json`);

    // get content
    let manifest = fetch(url, {sync: true});

    if (!manifest.ok) {
        console.error(`Load manifest - FAILED`);
        return;
    }

    // convert to json
    try {
        manifest = manifest.json();
    } catch (e) {
        console.exception(`Convert manifest to json - FAILED`, e);
        return;
    }

    console.debug("manifest", manifest);

    console.line();

    // check if temporary directory exists
    const stat = sys.fs.$stat(manifest["tmp"]);

    if (!(stat && stat.isDirectory))
        // create temporary dir
        if (!sys.fs.$mkdir(manifest["tmp"]))
            throw new Error(`Create temporary directory - FAILED - ${manifest["tmp"]}`);
        else
            console.log(`Create temporary directory - OK - ${manifest["tmp"]}`);

    // create exe icon
    let args = [
        "magick",
        "-density", "256x256",
        "-background", "transparent",
        // source
        manifest["icon"],
        "-define", "icon:auto-resize",
        "-colors", "256",
        // dest
        manifest["tmp"] + icon,
    ];

    console.debug("magick arguments", args);

    let process;

    try {
        process = sys.spawn(args, { stdout: "pipe", stderr: "pipe"});
    }
    catch (e) {
        console.exception(e);
        return;
    }

    readPipe(process.stdout);
    readPipe(process.stderr);

    await process.wait();

    console.line();

    // pack resources
    args = [
        packfolder,
        // what to pack
        manifest["resources"],
        // destination file
        manifest["tmp"] + resources,
        // archive type
        "-binary",
    ];

    console.debug("packfolder arguments", args);

    console.line();

    try {
        process = sys.spawn(args, { stdout: "pipe", stderr: "pipe"});
    }
    catch (e) {
        console.exception(e);
        return;
    }

    readPipe(process.stdout);
    readPipe(process.stderr);

    let result = await process.wait();

    if (result.exitCode !== 0)
        throw new Error(`packfolder - FAILED - ${result.exitCode}`);

    console.line();

/*
    // assemble exe required params (from scapp cpp)
    const params = {
        productName: "demo",
        productVersion: "1.0.0",
        productCopyright: "copyright",

        icofile: path + "/bin/tmp/demo.ico",
    };
*/

    switch (platform) {
        case "windows":
            buildBinary("win-x32", manifest);
            buildBinary("win-x64", manifest);
            break;

        case "linux":
            buildBinary("linux", manifest);
            break;

        case "osx":
            buildBinary("macosx", manifest);
            break;

        default:
            throw new Error(`unsupported plaform - ${platform}`);
    }
}

/**
 * Build binary
 * @param  string platform
 * @param  object manifest
 * @return void
 */
function buildBinary(platform, manifest)
{
    // get current cwd
    const cwd = URL.toPath(__DIR__);

    //console.log(cwd);

    // add icon file to manifest
    manifest["icofile"] = URL.toPath(cwd + manifest["tmp"] + icon);

    // get binary extension
    const extension = platform.startsWith("win-") ? ".exe" : "";

    // scapp binary
    const scapp = cwd + `bin/${platform}/scapp${extension}`;

    // output binary
    const output = cwd + `bin/${platform}/${manifest["productName"]}${extension}`;

    // packed resources
    const res = cwd + manifest["tmp"] + resources;

    console.debug(`Assemble binary arguments - `, scapp, output, res);

    // build binary
    const result = Window.this.scapp.assembleExe(scapp, output, res, manifest);

    switch (result) {
        case 0:
            console.note(`Build binary ${platform} - OK`);
            break;

        case 1:
            console.error(`Build binary ${platform} - FAILED - no metadata update`);
            break;

        case -1:
            console.error(`Build binary ${platform} - FAILED - no .dat file`);
            break;

        case -2:
            console.error(`Build binary ${platform} - FAILED - open output file`);
            break;

        case -3:
            console.error(`Build binary ${platform} - FAILED - write output file`);
            break;

        default:
            console.error(`Build binary ${platform} - FAILED - unknown error - ${result}`);
            break;
    }
}

async function readPipe(pipe)
{
    try {
        while (pipe) {
            const text = sciter.decode(await pipe.read());

            if (text.length !== 0)
                console.log(text);
        }
    } catch (e) {
        if (e.message == "socket is not connected")
            return;
        else
            console.exception(e);
    }
}

</script>
</head>
<body>
    <plaintext #logger readonly />
</body>
</html>
