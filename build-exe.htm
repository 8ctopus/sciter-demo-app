<html
    window-resizable="true"
    window-width="700dip"
    window-height="700dip"
>
<head>
<title>Build exe</title>
<style>

@import url(src/vendor/8ctopus/sciter-logger/src/logger.css);

plaintext#logger {
    height: *;
}

</style>
<script type="module">

import {logger} from "src/vendor/8ctopus/sciter-logger/src/logger.js";
import * as utils from "src/vendor/8ctopus/sciter-utils/src/utils.js";
import * as sys from "@sys";
import * as sciter from "@sciter";

// initialize logger
logger.init({
    file: URL.toPath(__DIR__ + "test.log"),
    clear: true,
});

// attach logger to console
logger.attach();

// capture unhandled exceptions
logger.capture();

document.on("ready", async() => {
    // subscribe to logger messages
    logger.plaintext(document.$("plaintext#logger"));

    // add support for F5 reload
    utils.addReloadWindow();

    // close window on escape
    utils.closeWindowOnEscape();

    // center window on screen
    utils.centerWindow("screen");

    // log sciter version
    console.debug(utils.sciterInfo());

    // create exe icon
    let args = [
        "magick",
        "-density", "256x256",
        "-background", "transparent",
        "src/icon.svg",
        "-define", "icon:auto-resize",
        "-colors", "256",
        "bin/tmp/demo.ico",
    ];

    console.log(args.join(" "));

    let process;

    try {
        process = sys.spawn(args, { stdout: "pipe", stderr: "pipe"});
    }
    catch (e) {
        console.exception(e.message);
        return;
    }

    readPipe(process.stdout);
    readPipe(process.stderr);

    await process.wait();

    console.line();

    // pack exe resources
    args = [
        "bin/packfolder.exe",
        "src",
        "bin/tmp/demo.dat",
        "-binary",
    ];

    console.log(args.join(" "));

    try {
        process = sys.spawn(args, { stdout: "pipe", stderr: "pipe"});
    }
    catch (e) {
        console.exception(e.message);
        return;
    }

    readPipe(process.stdout);
    readPipe(process.stderr);

    await process.wait();

    console.line();

    // get current path
    const path = sys.cwd();

    // build params
    const params = {
        productName: "demo",
        productVersion: "1.0.0",
        productCopyright: "demo copyright",

        icofile: path + "/bin/tmp/demo.ico",
    };

    // build exe
    const result = Window.this.scapp.assembleExe(
        // scapp exe
        path + "/bin/x32/scapp.exe",

        // packed resources
        path + "/bin/tmp/demo.dat",

        // output binary
        path + "/bin/x32/demo.exe",
        params);

    switch (result) {
        case 0:
            console.note(`Build exe - OK`);
            break;

        case 1:
            console.error(`Build exe - FAILED - no metadata update`);
            break;

        case -1:
            console.error(`Build exe - FAILED - no .dat file`);
            break;

        case -2:
            console.error(`Build exe - FAILED - open output file`);
            break;

        case -3:
            console.error(`Build exe - FAILED - write output file`);
            break;
    }
});

async function readPipe(pipe)
{
    try {
        while (pipe) {
            const text = sciter.decode(await pipe.read());

            if (text.length !== 0)
                console.log(text);
        }
    } catch (e) {
        if (e.message == "socket is not connected")
            return;
        else
            console.error("exception");
    }
}

</script>
</head>
<body>
    <plaintext #logger readonly />
</body>
</html>
