<html
    window-resizable="true"
    window-width="700dip"
    window-height="700dip"
    window-icon="icon.svg"
>
<head>
<title>sciter demo app</title>
<style>

@import url(vendor/8ctopus/sciter-logger/src/logger.css);
@import url(vendor/8ctopus/sciter-pagecontrol/src/pagecontrol.css);
@import url(css/themes/default.css);

a#forgotPassword {
    margin-left: 2em;
}

a#createAccount {
    margin-left: 0.3em;
}

plaintext#logger {
    height: *;
}

</style>
<script type="module">

import * as sys from "@sys";
import {logger} from "vendor/8ctopus/sciter-logger/src/logger.js";
import * as utils from "vendor/8ctopus/sciter-utils/src/utils.js";
import {dialogs} from "vendor/8ctopus/sciter-dialogs/src/dialogs.js";
import {i18n} from "vendor/8ctopus/sciter-i18n/src/i18n.js";
import {analytics} from "vendor/8ctopus/sciter-analytics/src/analytics.js";

// current working directory
const cwd = URL.fromPath(sys.cwd());

// app directory (will point to resources in release)
const dir = __DIR__.replace(/\/$/, "");

let debug;
let version;
let init = false;
const lockFile = URL.toPath(cwd + "/.lock");

// do not debug in release
debug = dir.startsWith("this://app") ? false : true;

// capture unhandled exceptions
logger.capture(unhandledExceptionHandler);

// check for lock file
const stat = sys.fs.$stat(lockFile);

if (stat && stat.isFile)
    //sys.process.exit();
    throw new Error("app already running");

// create lock file
let file = sys.fs.$open(lockFile, "w");

// close lock file
file.close();

// initialize logger
logger.init({
    url: cwd + "/app-%DATE%.log",
    clear: debug,
});

// attach logger to console
logger.attach();

// log if sciter running in debug
if (debug)
    logger.debug();

document.on("ready", function() {
    // subscribe to logger messages
    logger.plaintext(document.$("plaintext#logger"));

    if (debug)
        // log sciter version
        console.debug(utils.sciterInfo());

    // get command line arguments
    console.debug("command line arguments", Window.this.scapp.argv);

    console.debug(`device DPI = pixels in 1 inch - ${utils.devicePixels()}`);

    // add support for F5 reload
    utils.addReloadWindow(Window.this);

    // close window on escape
    utils.closeWindowOnEscape(Window.this);

    // center window on screen
    utils.centerWindow(Window.this, "screen");

    // fixes win + m not working
    // https://sciter.com/forums/topic/windows-m-not-working-when-window-resizable-is-false/
    Window.this.isMinimizable = true;

    // load manifest
    let manifest = {};

    utils.loadJson(`${dir}/manifest.json`, manifest);

    console.log("Load manifest - OK");

    // set window title
    version = `${manifest.productName} ${manifest.productVersion}`;
    Window.this.caption = version;

    // set endpoint
    analytics.init({
        //endpoint: "http://localhost/index.php"
        log: true,
    });

    // add environmental variables
    analytics.env({
        name: manifest.productName,
        version: manifest.productVersion,
    });

    // log event
    analytics.event("app started");

    // watch app close
    analytics.watch("closerequest", null, "app close request");

    // log monitors
    utils.logMonitors();
    console.log(`on monitor ${Window.this.screen + 1}`);

    // configure dialogs
    dialogs.setOptions({
        logging: true,
        callback: translateDialog,
    });

    // initialize translation engine
    const locale = "fr";
    const config = {
        // i18n logging
        logging: debug,

        // debug i18next
        debug: false,

        defaultValue: debug ? " (i18n)" : "",

        interpolation: {
            escapeValue: false,
            defaultVariables: {
                name: manifest.productName,
                version: manifest.productVersion,
            },
        },
    };

    if (i18n.init(locale, document.url(`locales/${locale}.json`), config))
        console.log("i18n init - OK");

    // translate window
    i18n.i18n(document);

    // bring window to front and set input focus
    if (Window.this.activate(true))
        console.log("Activate window - OK");
    else
        console.error("Activate window - FAILED");

    init = true;
});

// on close query
document.on("closerequest", function() {
    // do not ask for close request if init is not complete
    if (!init)
        return;

    // ask for user confirmation
    const result = dialogs.show("question", i18n.m("messages:cancel_on_quit", "Operation in progress.\r\n\r\nCancel?"), "yes no");

    if (result !== "yes") {
        // cancel quit
        event.preventDefault();
        return;
    }

});

// on close
document.on("beforeunload", function() {
    console.log("Close application");

    // delete lock file
    sys.fs.unlink(lockFile);

    // flush i/o queue before closing app otherwise the previous line never gets executed
    utils.flushIOQueue();
});

document.on("click", function(event, element) {
    const pagecontrol = document.$("pagecontrol");

    switch (element.id) {
        case "btLogin":
            pagecontrol.showTab("tsDashboard");
            break;

        case "createAccount":
            pagecontrol.showTab("tsSignup");
            break;

        case "btSignUp":
            pagecontrol.showTab("tsLogin");
            break;

        case "forgotPassword":
            pagecontrol.showTab("tsReset");
            break;

        case "reset":
            pagecontrol.showTab("tsSent");
            break;

        case "showEvents":
            analytics.log();
            break;

        case "sendEvents":
            analytics.send();
            break;

        default:
    }
});

// handle show tab event
document.on("showtab", "pagecontrol", function(event, element) {
    console.debug(event.detail.tab);

    switch (event.detail.tab) {
        case "tsLogin":
            event = "start login";
            break;

        case "tsSignup":
            event = "start signup";
            break;

        case "tsDashboard":
            event = "end login";
            break;

        case "tsReset":
            event = "start reset";
            break;

        case "tsSent":
            event = "end reset";
            break;

        default:
    }

    //console.debug(`event - ${event}`);

    // log event
    analytics.event(event);
});

/// window state changes
Window.this.on("statechange", function(event) {
    if (Window.this.state !== Window.WINDOW_MINIMIZED)
        return;

    // hide window
    console.log("Minimize window...");
    Window.this.state = Window.WINDOW_HIDDEN;

    // show tray icon
    showTrayIcon(`${dir}/icon.svg`, version);
});

/// click on tray icon
Window.this.on("trayiconclick", function(event) {
    console.log("Show window...");
    Window.this.state = Window.WINDOW_SHOWN;

    Window.this.activate(true);

    // remove tray icon
    Window.this.trayIcon("remove");
});

/**
 * Unhandled exception handler
 * @param  Error|String e
 * @return void
 */
function unhandledExceptionHandler(e)
{
    typeof console.exception === "function" ? console.exception(e) : console.error(e);

    // check if app has passed init point
    if (init)
        // continue running
        return;

    // close app (can still be stopped in closerequest event)
    console.log("Close app...");

    // flush i/o queue before closing app otherwise the previous line never gets executed
    utils.flushIOQueue();

    Window.this.close();
}

/**
 * Show tray icon
 * @param string icon
 * @param string text
 * @return void
 */
async function showTrayIcon(icon, text)
{
    Window.this.trayIcon({
        image: await Graphics.Image.load(icon),
        text: text,
    });
}

/**
 * Translate dialog callback
 * @param DOMElement root
 * @return void
 */
function translateDialog(root)
{
    // translate dialog
    i18n.i18n(root);
}

</script>
</head>
<body>
    <pagecontrol header-position="top" header-visible="true">
        <tab caption="login" #tsLogin selected>
            <div .vbox .border-spacing .pd>
                <h1 data-i18n> Sign-in </h1>
                <label for="email" data-i18n> Username or email address </label>
                <input type="text" #email />
                <div .hbox>
                    <label for="password" data-i18n> Password </label><a #forgotPassword tabindex data-i18n> Forgot password? </a>
                </div>
                <input type="password" #password />
                <button #btLogin data-i18n> Login </button>
                <p data-i18n>New? <a #createAccount tabindex data-i18n>Create an account</a>.</p>
            </div>
        </tab>
        <tab caption="signup" #tsSignup>
            <div .vbox .border-spacing .pd>
                <h1 data-i18n> Sign Up </h1>
                <label for="email2" data-i18n> Email address </label>
                <input type="text" #email2 />
                <label for="password2" data-i18n> Password </label>
                <input type="password" #password2 />
                <button #btSignUp data-i18n> Sign up </button>
            </div>
        </tab>
        <tab caption="dashboard" #tsDashboard>
            <div .vbox .border-spacing .pd>
                <h1 data-i18n> Your Dashboard </h1>
            </div>
        </tab>
        <tab caption="reset" #tsReset>
            <div .vbox .border-spacing .pd>
                <h1 data-i18n> Reset your password </h1>
                <label for="email2" data-i18n> Enter your user account's verified email address and we will send you a password reset link. </label>
                <input type="text" #email2 />
                <button #reset data-i18n> Send password reset email </button>
            </div>
        </tab>
        <tab caption="sent" #tsSent>
            <div .vbox .border-spacing .pd>
                <h1 data-i18n> Password reset email sent! </h1>
            </div>
        </tab>
    </pagecontrol>
    <plaintext #logger readonly />
</body>
</html>
